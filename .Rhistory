if (top_genes$logFC[i]>0) {
DE<-append(DE, "Up")
}
else {
DE<-append(DE, "Down")
}
}
}
top_genes$DE<- DE
## Gene symbols for top 2 up and down DEGs
DEG_symbol<-vector()
for (i in 1:dim(top_genes)[1]) {
if (top_genes$DE[i]!="ns" & abs(top_genes$logFC[i])>1.5) {
DEG_symbol<-append(DEG_symbol, rownames(top_genes)[i])
}
else {
DEG_symbol<-append(DEG_symbol, NA)
}
}
top_genes$DEG_symbol<- DEG_symbol
## MA plot for DE genes
cols <- c("Up" = "firebrick2", "Down" = "steelblue2", "ns" = "grey")
sizes <- c("Up" = 2, "Down" = 2, "ns" = 1)
alphas <- c("Up" = 1, "Down" = 1, "ns" = 0.5)
top_genes$mean_log_expr<-apply(vGene$E, 1, mean)
p1<-ggplot(data = top_genes,
aes(x = mean_log_expr,y = logFC,
fill = DE,
size = DE,
alpha = DE)) +
geom_point(shape = 21,
colour = "black") +
scale_fill_manual(values = cols) +
scale_size_manual(values = sizes) +
scale_alpha_manual(values = alphas) +
labs(x="Mean of normalized counts")
## Volcano plot for DE genes
p2<-ggplot(data = top_genes,
aes(x = logFC,y = -log10(adj.P.Val),
fill = DE,
size = DE,
alpha = DE,
label= DEG_symbol)) +
geom_point(shape = 21) +
geom_hline(yintercept = -log10(FDR),
linetype = "dashed") +
geom_vline(xintercept = c(-1.5,1.5),
linetype = "dashed") +
geom_label_repel(fill="white", size=2, max.overlaps = Inf,
box.padding = 0.2,
show.legend=FALSE) +
labs(y="-log10(FDR)")+
scale_fill_manual(values = cols) +
scale_size_manual(values = sizes) +
scale_alpha_manual(values = alphas)
plot_grid(p1, p2, ncol=2)
}
## Boxplot of a single gene
DE_one_boxplot <- function (age, DEgene){
RSE <- eval(parse_expr(paste("rse_gene", age, 'qc', sep="_")))
top_genes <- eval(parse_expr(paste("top_genes", age, sep="_")))
vGene <- eval(parse_expr(paste("vGene", age, sep="_")))
if (age=='pups'){
formula<- ~ Group + Sex + flowcell + mitoRate + overallMapRate + totalAssignedGene + detected + ERCCsumLogErr
}
else{
formula<- ~ Group + Pregnancy + flowcell + overallMapRate + totalAssignedGene + rRNA_rate + detected + ERCCsumLogErr
}
## q-value for the gene
q_value<-signif(top_genes[which(rownames(top_genes)==DEgene), "adj.P.Val"], digits = 3)
## logFC for the gene
logFC<-signif(top_genes[which(rownames(top_genes)==DEgene), "logFC"], digits = 3)
## Regress out residuals to remove batch effects
model=model.matrix(formula, data=colData(RSE))
vGene$E<-cleaningY(vGene$E, model, P=2)
## Samples as rows and genes as columns
lognorm_DE<-t(vGene$E)
## Add samples' Group information
lognorm_DE<-data.frame(lognorm_DE, "Group"=colData(RSE)$Group)
ggplot(data=as.data.frame(lognorm_DE),
aes(x=Group,y=eval(parse_expr(DEgene)))) +
## Hide outliers
geom_boxplot(outlier.color = "#FFFFFFFF") +
## Samples colored by Group + noise
geom_jitter(aes(colour=Group),shape=16,
position=position_jitter(0.2)) +
theme_classic() +
labs(x = "Group", y = "norm counts",
title = DEgene,
subtitle = paste(" FDR:", q_value, "\n", 'logFC:', logFC)) +
theme(plot.margin=unit (c (1,1.5,1,1.5), 'cm'), legend.position = "none",
plot.title = element_text(hjust=0.5, size=10, face="bold"),
plot.subtitle = element_text(size = 9))
}
plots_DE(top_genes_adults, vGene_adults)
plots_DE(top_genes_pups, vGene_pups)
top_genes[order(top_genes$adj.P.Val),]
## Gene symbols for top 2 up and down DEGs
up_DEGs <- top_genes[which(top_genes$logFC>0),]
down_DEGs <- top_genes[which(top_genes$logFC<0),]
dim(up_DEGs)
dim(down_DEGs)
up_DEGs[order(up_DEGs$adj.P.Val),]
up_DEGs[order(up_DEGs$adj.P.Val),]
up_DEGs[order(up_DEGs$adj.P.Val),][1:2]
up_DEGs[order(up_DEGs$adj.P.Val)[1:2],]
rownames(up_DEGs[order(up_DEGs$adj.P.Val)[1:2],])
rownames(down_DEGs[order(down_DEGs$adj.P.Val)[1:2],])
## Plots for DE genes
plots_DE<-function(top_genes, vGene) {
## Define FDR threshold for significance
FDR=0.05
## NS/Down/Upregulated genes
DE<-vector()
for (i in 1:dim(top_genes)[1]) {
if (top_genes$adj.P.Val[i]>FDR) {
DE<-append(DE, "ns")
}
else {
if (top_genes$logFC[i]>0) {
DE<-append(DE, "Up")
}
else {
DE<-append(DE, "Down")
}
}
}
top_genes$DE<- DE
## Gene symbols for top 2 up and down DEGs
up_DEGs <- top_genes[which(top_genes$logFC>0),]
down_DEGs <- top_genes[which(top_genes$logFC<0),]
## Top 2 most significant up and down DEGs
top_up_DEGs <- rownames(up_DEGs[order(up_DEGs$adj.P.Val)[1:2],])
top_down_DEGs <- rownames(down_DEGs[order(down_DEGs$adj.P.Val)[1:2],])
DEG_symbol<-vector()
for (i in 1:dim(top_genes)[1]) {
if (rownames(top_genes)[i] %in% top_up_DEGs | rownames(top_genes)[i] %in% top_down_DEGs) {
DEG_symbol<-append(DEG_symbol, rownames(top_genes)[i])
}
else {
DEG_symbol<-append(DEG_symbol, NA)
}
}
top_genes$DEG_symbol<- DEG_symbol
## MA plot for DE genes
cols <- c("Up" = "firebrick2", "Down" = "steelblue2", "ns" = "grey")
sizes <- c("Up" = 2, "Down" = 2, "ns" = 1)
alphas <- c("Up" = 1, "Down" = 1, "ns" = 0.5)
top_genes$mean_log_expr<-apply(vGene$E, 1, mean)
p1<-ggplot(data = top_genes,
aes(x = mean_log_expr,y = logFC,
fill = DE,
size = DE,
alpha = DE)) +
geom_point(shape = 21,
colour = "black") +
scale_fill_manual(values = cols) +
scale_size_manual(values = sizes) +
scale_alpha_manual(values = alphas) +
labs(x="Mean of normalized counts")
## Volcano plot for DE genes
p2<-ggplot(data = top_genes,
aes(x = logFC,y = -log10(adj.P.Val),
fill = DE,
size = DE,
alpha = DE,
label= DEG_symbol)) +
geom_point(shape = 21) +
geom_hline(yintercept = -log10(FDR),
linetype = "dashed") +
geom_vline(xintercept = c(-1.5,1.5),
linetype = "dashed") +
geom_label_repel(fill="white", size=2, max.overlaps = Inf,
box.padding = 0.2,
show.legend=FALSE) +
labs(y="-log10(FDR)")+
scale_fill_manual(values = cols) +
scale_size_manual(values = sizes) +
scale_alpha_manual(values = alphas)
plot_grid(p1, p2, ncol=2)
}
plots_DE(top_genes_adults, vGene_adults)
plots_DE(top_genes_pups, vGene_pups)
## Plots for DE genes
plots_DE<-function(top_genes, vGene) {
## Define FDR threshold for significance
FDR=0.05
## NS/Down/Upregulated genes
DE<-vector()
for (i in 1:dim(top_genes)[1]) {
if (top_genes$adj.P.Val[i]>FDR) {
DE<-append(DE, "ns")
}
else {
if (top_genes$logFC[i]>0) {
DE<-append(DE, "Up")
}
else {
DE<-append(DE, "Down")
}
}
}
top_genes$DE<- DE
## Gene symbols for top 2 up and down DEGs
up_DEGs <- top_genes[which(top_genes$logFC>0),]
down_DEGs <- top_genes[which(top_genes$logFC<0),]
## Top 2 most significant up and down DEGs
top_up_DEGs <- rownames(up_DEGs[order(up_DEGs$adj.P.Val)[1:2],])
top_down_DEGs <- rownames(down_DEGs[order(down_DEGs$adj.P.Val)[1:2],])
DEG_symbol<-vector()
for (i in 1:dim(top_genes)[1]) {
if (rownames(top_genes)[i] %in% top_up_DEGs | rownames(top_genes)[i] %in% top_down_DEGs) {
DEG_symbol<-append(DEG_symbol, rownames(top_genes)[i])
}
else {
DEG_symbol<-append(DEG_symbol, NA)
}
}
top_genes$DEG_symbol<- DEG_symbol
## MA plot for DE genes
cols <- c("Up" = "firebrick2", "Down" = "steelblue2", "ns" = "grey")
sizes <- c("Up" = 2, "Down" = 2, "ns" = 1)
alphas <- c("Up" = 1, "Down" = 1, "ns" = 0.5)
top_genes$mean_log_expr<-apply(vGene$E, 1, mean)
p1<-ggplot(data = top_genes,
aes(x = mean_log_expr,y = logFC,
fill = DE,
size = DE,
alpha = DE)) +
geom_point(shape = 21,
colour = "black") +
scale_fill_manual(values = cols) +
scale_size_manual(values = sizes) +
scale_alpha_manual(values = alphas) +
labs(x="Mean of normalized counts")
## Volcano plot for DE genes
p2<-ggplot(data = top_genes,
aes(x = logFC,y = -log10(adj.P.Val),
fill = DE,
size = DE,
alpha = DE,
label= DEG_symbol)) +
geom_point(shape = 21) +
geom_hline(yintercept = -log10(FDR),
linetype = "dashed") +
geom_label_repel(fill="white", size=2, max.overlaps = Inf,
box.padding = 0.2,
show.legend=FALSE) +
labs(y="-log10(FDR)")+
scale_fill_manual(values = cols) +
scale_size_manual(values = sizes) +
scale_alpha_manual(values = alphas)
plot_grid(p1, p2, ncol=2)
}
plots_DE(top_genes_adults, vGene_adults)
plots_DE(top_genes_pups, vGene_pups)
plots_DE(top_genes_adults, vGene_adults)
plots_DE(top_genes_pups, vGene_pups)
## Plots for DE genes
plots_DE<-function(top_genes, vGene) {
## Define FDR threshold for significance
FDR=0.05
## NS/Down/Upregulated genes
DE<-vector()
for (i in 1:dim(top_genes)[1]) {
if (top_genes$adj.P.Val[i]>FDR) {
DE<-append(DE, "ns")
}
else {
if (top_genes$logFC[i]>0) {
DE<-append(DE, "Up")
}
else {
DE<-append(DE, "Down")
}
}
}
top_genes$DE<- DE
## Gene symbols for top up and down DEGs
up_DEGs <- top_genes[which(top_genes$logFC>0),]
down_DEGs <- top_genes[which(top_genes$logFC<0),]
## Top most significant up and down DEGs
top_up_DEGs <- rownames(up_DEGs[order(up_DEGs$adj.P.Val)[1],])
top_down_DEGs <- rownames(down_DEGs[order(down_DEGs$adj.P.Val)[1],])
DEG_symbol<-vector()
for (i in 1:dim(top_genes)[1]) {
if (rownames(top_genes)[i] %in% top_up_DEGs | rownames(top_genes)[i] %in% top_down_DEGs) {
DEG_symbol<-append(DEG_symbol, rownames(top_genes)[i])
}
else {
DEG_symbol<-append(DEG_symbol, NA)
}
}
top_genes$DEG_symbol<- DEG_symbol
## MA plot for DE genes
cols <- c("Up" = "firebrick2", "Down" = "steelblue2", "ns" = "grey")
sizes <- c("Up" = 2, "Down" = 2, "ns" = 1)
alphas <- c("Up" = 1, "Down" = 1, "ns" = 0.5)
top_genes$mean_log_expr<-apply(vGene$E, 1, mean)
p1<-ggplot(data = top_genes,
aes(x = mean_log_expr,y = logFC,
fill = DE,
size = DE,
alpha = DE)) +
geom_point(shape = 21,
colour = "black") +
scale_fill_manual(values = cols) +
scale_size_manual(values = sizes) +
scale_alpha_manual(values = alphas) +
labs(x="Mean of normalized counts")
## Volcano plot for DE genes
p2<-ggplot(data = top_genes,
aes(x = logFC,y = -log10(adj.P.Val),
fill = DE,
size = DE,
alpha = DE,
label= DEG_symbol)) +
geom_point(shape = 21) +
geom_hline(yintercept = -log10(FDR),
linetype = "dashed") +
geom_label_repel(fill="white", size=2, max.overlaps = Inf,
box.padding = 0.2,
show.legend=FALSE) +
labs(y="-log10(FDR)")+
scale_fill_manual(values = cols) +
scale_size_manual(values = sizes) +
scale_alpha_manual(values = alphas)
plot_grid(p1, p2, ncol=2)
}
plots_DE(top_genes_adults, vGene_adults)
plots_DE(top_genes_pups, vGene_pups)
## Boxplots for DEGs
DE_one_boxplot('pups', 'ENSMUSG00000026812.16')
DE_one_boxplot('pups', 'ENSMUSG00000033713.12')
## Boxplot of a single gene
DE_one_boxplot <- function (age, DEgene){
RSE <- eval(parse_expr(paste("rse_gene", age, 'qc', sep="_")))
top_genes <- eval(parse_expr(paste("top_genes", age, sep="_")))
vGene <- eval(parse_expr(paste("vGene", age, sep="_")))
if (age=='pups'){
formula<- ~ Group + Sex + flowcell + mitoRate + overallMapRate + totalAssignedGene + detected + ERCCsumLogErr
}
else{
formula<- ~ Group + Pregnancy + flowcell + overallMapRate + totalAssignedGene + rRNA_rate + detected + ERCCsumLogErr
}
## q-value for the gene
q_value<-signif(top_genes[which(rownames(top_genes)==DEgene), "adj.P.Val"], digits = 3)
## logFC for the gene
logFC<-signif(top_genes[which(rownames(top_genes)==DEgene), "logFC"], digits = 3)
## Regress out residuals to remove batch effects
model=model.matrix(formula, data=colData(RSE))
vGene$E<-cleaningY(vGene$E, model, P=2)
## Samples as rows and genes as columns
lognorm_DE<-t(vGene$E)
## Add samples' Group information
lognorm_DE<-data.frame(lognorm_DE, "Group"=colData(RSE)$Group)
ggplot(data=as.data.frame(lognorm_DE),
aes(x=Group,y=eval(parse_expr(DEgene)))) +
## Hide outliers
geom_boxplot(outlier.color = "#FFFFFFFF") +
## Samples colored by Group + noise
geom_jitter(aes(colour=Group),shape=16,
position=position_jitter(0.2)) +
theme_classic() +
labs(x = "Group", y = "norm counts",
title = DEgene,
subtitle = paste(" FDR:", q_value, "\n", 'logFC:', logFC)) +
theme(plot.margin=unit (c(1.5,2.5,1.5,2.5), 'cm'), legend.position = "none",
plot.title = element_text(hjust=0.5, size=10, face="bold"),
plot.subtitle = element_text(size = 9))
}
## Boxplots for DEGs
DE_one_boxplot('pups', 'ENSMUSG00000026812.16')
DE_one_boxplot('pups', 'ENSMUSG00000033713.12')
library(jaffelab)
## Plots for DE genes
plots_DE<-function(top_genes, vGene) {
## Define FDR threshold for significance
FDR=0.05
## NS/Down/Upregulated genes
DE<-vector()
for (i in 1:dim(top_genes)[1]) {
if (top_genes$adj.P.Val[i]>FDR) {
DE<-append(DE, "ns")
}
else {
if (top_genes$logFC[i]>0) {
DE<-append(DE, "Up")
}
else {
DE<-append(DE, "Down")
}
}
}
top_genes$DE<- DE
## Gene symbols for top up and down DEGs
up_DEGs <- top_genes[which(top_genes$logFC>0),]
down_DEGs <- top_genes[which(top_genes$logFC<0),]
## Top most significant up and down DEGs
top_up_DEGs <- rownames(up_DEGs[order(up_DEGs$adj.P.Val)[1],])
top_down_DEGs <- rownames(down_DEGs[order(down_DEGs$adj.P.Val)[1],])
DEG_symbol<-vector()
for (i in 1:dim(top_genes)[1]) {
if (rownames(top_genes)[i] %in% top_up_DEGs | rownames(top_genes)[i] %in% top_down_DEGs) {
DEG_symbol<-append(DEG_symbol, rownames(top_genes)[i])
}
else {
DEG_symbol<-append(DEG_symbol, NA)
}
}
top_genes$DEG_symbol<- DEG_symbol
## MA plot for DE genes
cols <- c("Up" = "firebrick2", "Down" = "steelblue2", "ns" = "grey")
sizes <- c("Up" = 2, "Down" = 2, "ns" = 1)
alphas <- c("Up" = 1, "Down" = 1, "ns" = 0.5)
top_genes$mean_log_expr<-apply(vGene$E, 1, mean)
p1<-ggplot(data = top_genes,
aes(x = mean_log_expr,y = logFC,
fill = DE,
size = DE,
alpha = DE)) +
geom_point(shape = 21,
colour = "black") +
scale_fill_manual(values = cols) +
scale_size_manual(values = sizes) +
scale_alpha_manual(values = alphas) +
labs(x="Mean of normalized counts")
## Volcano plot for DE genes
p2<-ggplot(data = top_genes,
aes(x = logFC,y = -log10(adj.P.Val),
fill = DE,
size = DE,
alpha = DE,
label= DEG_symbol)) +
geom_point(shape = 21) +
geom_hline(yintercept = -log10(FDR),
linetype = "dashed") +
geom_label_repel(fill="white", size=2, max.overlaps = Inf,
box.padding = 0.2,
show.legend=FALSE) +
labs(y="-log10(FDR)")+
scale_fill_manual(values = cols) +
scale_size_manual(values = sizes) +
scale_alpha_manual(values = alphas)
plot_grid(p1, p2, ncol=2)
}
## Boxplot of a single gene
DE_one_boxplot <- function (age, DEgene){
RSE <- eval(parse_expr(paste("rse_gene", age, 'qc', sep="_")))
top_genes <- eval(parse_expr(paste("top_genes", age, sep="_")))
vGene <- eval(parse_expr(paste("vGene", age, sep="_")))
if (age=='pups'){
formula<- ~ Group + Sex + flowcell + mitoRate + overallMapRate + totalAssignedGene + detected + ERCCsumLogErr
}
else{
formula<- ~ Group + Pregnancy + flowcell + overallMapRate + totalAssignedGene + rRNA_rate + detected + ERCCsumLogErr
}
## q-value for the gene
q_value<-signif(top_genes[which(rownames(top_genes)==DEgene), "adj.P.Val"], digits = 3)
## logFC for the gene
logFC<-signif(top_genes[which(rownames(top_genes)==DEgene), "logFC"], digits = 3)
## Regress out residuals to remove batch effects
model=model.matrix(formula, data=colData(RSE))
vGene$E<-cleaningY(vGene$E, model, P=2)
## Samples as rows and genes as columns
lognorm_DE<-t(vGene$E)
## Add samples' Group information
lognorm_DE<-data.frame(lognorm_DE, "Group"=colData(RSE)$Group)
p <-  ggplot(data=as.data.frame(lognorm_DE),
aes(x=Group,y=eval(parse_expr(DEgene)))) +
## Hide outliers
geom_boxplot(outlier.color = "#FFFFFFFF") +
## Samples colored by Group + noise
geom_jitter(aes(colour=Group),shape=16,
position=position_jitter(0.2)) +
theme_classic() +
labs(x = "Group", y = "norm counts",
title = DEgene,
subtitle = paste(" FDR:", q_value, "\n", 'logFC:', logFC)) +
theme(plot.margin=unit (c(1.5,2.5,1.5,2.5), 'cm'), legend.position = "none",
plot.title = element_text(hjust=0.5, size=10, face="bold"),
plot.subtitle = element_text(size = 9))
return(p)
}
## Boxplots for DEGs
p1 <- DE_one_boxplot('pups', 'ENSMUSG00000026812.16')
p1 + theme(plot.margin = c(1,2,1,2))
## Boxplots for DEGs
p1 <- DE_one_boxplot('pups', 'ENSMUSG00000026812.16')
p1 + theme(plot.margin = unit(c(1,2,1,2)), 'cm')
p1 + theme(plot.margin = units(c(1,2,1,2)), 'cm')
## Boxplots for DEGs
p1 <- DE_one_boxplot('pups', 'ENSMUSG00000026812.16')
p1 + theme(plot.margin = unit(c(1,2,1,2), 'cm'))
p1 + theme(plot.margin = unit(c(1,3,1,5), 'cm'))
p1 + theme(plot.margin = unit(c(1,5,1,5), 'cm'))
## Boxplots for DEGs
p1 <- DE_one_boxplot('pups', 'ENSMUSG00000026812.16') + theme(plot.margin = unit(c(1,5,1,5), 'cm'))
p2 <- DE_one_boxplot('pups', 'ENSMUSG00000033713.12') + theme(plot.margin = unit(c(1,5,1,5), 'cm'))
plot_grid(p1, p2)
## Boxplots for DEGs
p1 <- DE_one_boxplot('pups', 'ENSMUSG00000026812.16') + theme(plot.margin = unit(c(1,2,1,2), 'cm'))
p2 <- DE_one_boxplot('pups', 'ENSMUSG00000033713.12') + theme(plot.margin = unit(c(1,2,1,2), 'cm'))
plot_grid(p1, p2)
## Boxplots for DEGs
p1 <- DE_one_boxplot('pups', 'ENSMUSG00000026812.16') + theme(plot.margin = unit(c(1,1.4,1,1.4), 'cm'))
p2 <- DE_one_boxplot('pups', 'ENSMUSG00000033713.12') + theme(plot.margin = unit(c(1,1.4,1,1.4), 'cm'))
plot_grid(p1, p2)
## Boxplots for DEGs
p1 <- DE_one_boxplot('pups', 'ENSMUSG00000026812.16') + theme(plot.margin = unit(c(1.3,1.4,1.3,1.4), 'cm'))
p2 <- DE_one_boxplot('pups', 'ENSMUSG00000033713.12') + theme(plot.margin = unit(c(1.3,1.4,1.3,1.4), 'cm'))
plot_grid(p1, p2)
